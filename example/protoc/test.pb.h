// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_2eproto;
class SearchResponse;
struct SearchResponseDefaultTypeInternal;
extern SearchResponseDefaultTypeInternal _SearchResponse_default_instance_;
class SearchResponse_Result;
struct SearchResponse_ResultDefaultTypeInternal;
extern SearchResponse_ResultDefaultTypeInternal _SearchResponse_Result_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::SearchResponse* Arena::CreateMaybeMessage<::SearchResponse>(Arena*);
template<> ::SearchResponse_Result* Arena::CreateMaybeMessage<::SearchResponse_Result>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class SearchResponse_Result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SearchResponse.Result) */ {
 public:
  inline SearchResponse_Result() : SearchResponse_Result(nullptr) {}
  ~SearchResponse_Result() override;
  explicit PROTOBUF_CONSTEXPR SearchResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchResponse_Result(const SearchResponse_Result& from);
  SearchResponse_Result(SearchResponse_Result&& from) noexcept
    : SearchResponse_Result() {
    *this = ::std::move(from);
  }

  inline SearchResponse_Result& operator=(const SearchResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchResponse_Result& operator=(SearchResponse_Result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchResponse_Result* internal_default_instance() {
    return reinterpret_cast<const SearchResponse_Result*>(
               &_SearchResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SearchResponse_Result& a, SearchResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchResponse_Result* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchResponse_Result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchResponse_Result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchResponse_Result& from) {
    SearchResponse_Result::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResponse_Result* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SearchResponse.Result";
  }
  protected:
  explicit SearchResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnippetsFieldNumber = 4,
    kUrlFieldNumber = 1,
    kTitleFieldNumber = 2,
    kTelephoneFieldNumber = 3,
  };
  // repeated string snippets = 4;
  int snippets_size() const;
  private:
  int _internal_snippets_size() const;
  public:
  void clear_snippets();
  const std::string& snippets(int index) const;
  std::string* mutable_snippets(int index);
  void set_snippets(int index, const std::string& value);
  void set_snippets(int index, std::string&& value);
  void set_snippets(int index, const char* value);
  void set_snippets(int index, const char* value, size_t size);
  std::string* add_snippets();
  void add_snippets(const std::string& value);
  void add_snippets(std::string&& value);
  void add_snippets(const char* value);
  void add_snippets(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& snippets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_snippets();
  private:
  const std::string& _internal_snippets(int index) const;
  std::string* _internal_add_snippets();
  public:

  // string url = 1;
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string title = 2;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // int64 telephone = 3;
  void clear_telephone();
  int64_t telephone() const;
  void set_telephone(int64_t value);
  private:
  int64_t _internal_telephone() const;
  void _internal_set_telephone(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:SearchResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> snippets_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    int64_t telephone_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class SearchResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SearchResponse) */ {
 public:
  inline SearchResponse() : SearchResponse(nullptr) {}
  ~SearchResponse() override;
  explicit PROTOBUF_CONSTEXPR SearchResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchResponse(const SearchResponse& from);
  SearchResponse(SearchResponse&& from) noexcept
    : SearchResponse() {
    *this = ::std::move(from);
  }

  inline SearchResponse& operator=(const SearchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchResponse& operator=(SearchResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchResponse* internal_default_instance() {
    return reinterpret_cast<const SearchResponse*>(
               &_SearchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SearchResponse& a, SearchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchResponse& from) {
    SearchResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SearchResponse";
  }
  protected:
  explicit SearchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SearchResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 1,
  };
  // repeated .SearchResponse.Result results = 1;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::SearchResponse_Result* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SearchResponse_Result >*
      mutable_results();
  private:
  const ::SearchResponse_Result& _internal_results(int index) const;
  ::SearchResponse_Result* _internal_add_results();
  public:
  const ::SearchResponse_Result& results(int index) const;
  ::SearchResponse_Result* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SearchResponse_Result >&
      results() const;

  // @@protoc_insertion_point(class_scope:SearchResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SearchResponse_Result > results_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SearchResponse_Result

// string url = 1;
inline void SearchResponse_Result::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& SearchResponse_Result::url() const {
  // @@protoc_insertion_point(field_get:SearchResponse.Result.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchResponse_Result::set_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SearchResponse.Result.url)
}
inline std::string* SearchResponse_Result::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:SearchResponse.Result.url)
  return _s;
}
inline const std::string& SearchResponse_Result::_internal_url() const {
  return _impl_.url_.Get();
}
inline void SearchResponse_Result::_internal_set_url(const std::string& value) {
  
  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchResponse_Result::_internal_mutable_url() {
  
  return _impl_.url_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchResponse_Result::release_url() {
  // @@protoc_insertion_point(field_release:SearchResponse.Result.url)
  return _impl_.url_.Release();
}
inline void SearchResponse_Result::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  _impl_.url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SearchResponse.Result.url)
}

// string title = 2;
inline void SearchResponse_Result::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& SearchResponse_Result::title() const {
  // @@protoc_insertion_point(field_get:SearchResponse.Result.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchResponse_Result::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SearchResponse.Result.title)
}
inline std::string* SearchResponse_Result::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:SearchResponse.Result.title)
  return _s;
}
inline const std::string& SearchResponse_Result::_internal_title() const {
  return _impl_.title_.Get();
}
inline void SearchResponse_Result::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchResponse_Result::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchResponse_Result::release_title() {
  // @@protoc_insertion_point(field_release:SearchResponse.Result.title)
  return _impl_.title_.Release();
}
inline void SearchResponse_Result::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SearchResponse.Result.title)
}

// int64 telephone = 3;
inline void SearchResponse_Result::clear_telephone() {
  _impl_.telephone_ = int64_t{0};
}
inline int64_t SearchResponse_Result::_internal_telephone() const {
  return _impl_.telephone_;
}
inline int64_t SearchResponse_Result::telephone() const {
  // @@protoc_insertion_point(field_get:SearchResponse.Result.telephone)
  return _internal_telephone();
}
inline void SearchResponse_Result::_internal_set_telephone(int64_t value) {
  
  _impl_.telephone_ = value;
}
inline void SearchResponse_Result::set_telephone(int64_t value) {
  _internal_set_telephone(value);
  // @@protoc_insertion_point(field_set:SearchResponse.Result.telephone)
}

// repeated string snippets = 4;
inline int SearchResponse_Result::_internal_snippets_size() const {
  return _impl_.snippets_.size();
}
inline int SearchResponse_Result::snippets_size() const {
  return _internal_snippets_size();
}
inline void SearchResponse_Result::clear_snippets() {
  _impl_.snippets_.Clear();
}
inline std::string* SearchResponse_Result::add_snippets() {
  std::string* _s = _internal_add_snippets();
  // @@protoc_insertion_point(field_add_mutable:SearchResponse.Result.snippets)
  return _s;
}
inline const std::string& SearchResponse_Result::_internal_snippets(int index) const {
  return _impl_.snippets_.Get(index);
}
inline const std::string& SearchResponse_Result::snippets(int index) const {
  // @@protoc_insertion_point(field_get:SearchResponse.Result.snippets)
  return _internal_snippets(index);
}
inline std::string* SearchResponse_Result::mutable_snippets(int index) {
  // @@protoc_insertion_point(field_mutable:SearchResponse.Result.snippets)
  return _impl_.snippets_.Mutable(index);
}
inline void SearchResponse_Result::set_snippets(int index, const std::string& value) {
  _impl_.snippets_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:SearchResponse.Result.snippets)
}
inline void SearchResponse_Result::set_snippets(int index, std::string&& value) {
  _impl_.snippets_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:SearchResponse.Result.snippets)
}
inline void SearchResponse_Result::set_snippets(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.snippets_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SearchResponse.Result.snippets)
}
inline void SearchResponse_Result::set_snippets(int index, const char* value, size_t size) {
  _impl_.snippets_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SearchResponse.Result.snippets)
}
inline std::string* SearchResponse_Result::_internal_add_snippets() {
  return _impl_.snippets_.Add();
}
inline void SearchResponse_Result::add_snippets(const std::string& value) {
  _impl_.snippets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SearchResponse.Result.snippets)
}
inline void SearchResponse_Result::add_snippets(std::string&& value) {
  _impl_.snippets_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SearchResponse.Result.snippets)
}
inline void SearchResponse_Result::add_snippets(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.snippets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SearchResponse.Result.snippets)
}
inline void SearchResponse_Result::add_snippets(const char* value, size_t size) {
  _impl_.snippets_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SearchResponse.Result.snippets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SearchResponse_Result::snippets() const {
  // @@protoc_insertion_point(field_list:SearchResponse.Result.snippets)
  return _impl_.snippets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SearchResponse_Result::mutable_snippets() {
  // @@protoc_insertion_point(field_mutable_list:SearchResponse.Result.snippets)
  return &_impl_.snippets_;
}

// -------------------------------------------------------------------

// SearchResponse

// repeated .SearchResponse.Result results = 1;
inline int SearchResponse::_internal_results_size() const {
  return _impl_.results_.size();
}
inline int SearchResponse::results_size() const {
  return _internal_results_size();
}
inline void SearchResponse::clear_results() {
  _impl_.results_.Clear();
}
inline ::SearchResponse_Result* SearchResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:SearchResponse.results)
  return _impl_.results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SearchResponse_Result >*
SearchResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:SearchResponse.results)
  return &_impl_.results_;
}
inline const ::SearchResponse_Result& SearchResponse::_internal_results(int index) const {
  return _impl_.results_.Get(index);
}
inline const ::SearchResponse_Result& SearchResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:SearchResponse.results)
  return _internal_results(index);
}
inline ::SearchResponse_Result* SearchResponse::_internal_add_results() {
  return _impl_.results_.Add();
}
inline ::SearchResponse_Result* SearchResponse::add_results() {
  ::SearchResponse_Result* _add = _internal_add_results();
  // @@protoc_insertion_point(field_add:SearchResponse.results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SearchResponse_Result >&
SearchResponse::results() const {
  // @@protoc_insertion_point(field_list:SearchResponse.results)
  return _impl_.results_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_2eproto
